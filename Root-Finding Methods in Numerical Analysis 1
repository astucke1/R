############ Assignment 1  ############

# The Two polynomials in nested form
p1 <- function(x) {
  ((2 * x - 3 ) * x^2 + 3) * x - 1
}

p2 <- function(x) {
  (4 * x^3 + 1) * x - 1
}


# curves to view the two polynomials to "eye-ball" possible 0s 
curve(p1, xlim=c(-2,2), col='blue', lwd=2, lty=2, ylab='f(x)')
abline(h=0)
abline(v=0)

curve(p2, xlim=c(-1,1), col='blue', lwd=2, lty=2, ylab='f(x)')
abline(h=0)
abline(v=0)


######### Bisection Method #########
bisection.method <- function(f, a, b, tol = 1e-12, n = 10000) {
  k <- n # Initialize for iteration results
  
# I did not code out the parameter f(a)*f(b) =< 0 
  
  for (i in 1:n) {
    c <- (a + b) / 2 # Calculate midpoint
    k[i] <- c
    
    # If the function equals 0 at the midpoint or the midpoint is below the desired tolerance, stop the 
    # function and return the root.
    if ((f(c) == 0) || ((b - a) / 2) < tol) {
      resBisection <- list('root approximation' = c , 'iterations' = k)
      return(resBisection)
    }
    
    ## If the root was not determined in the previous iteration, update the values and proceed to the next iteration.
    ifelse(sign(f(c)) == sign(f(a)), 
           a <- c,
           b <- c)
  }
  # If the max number of iterations is reached and no root has been found, 
  # return message and end function.
  print('Too many iterations')
}


####### Newton's Method ###########
newton.method <- function(f, a, tol = 1e-12, n = 100) {
  require(numDeriv) # Package for computing f'(x)
  
  x0 <- a # Set start value to supplied lower bound
  k <- n # Initialize for iteration results
  
  # Check the lower bounds to see if approximations result in 0
  fa <- f(a)
  if (fa == 0.0) {
    return(a)
  }
  
  for (i in 1:n) {
    dx <- genD(func = f, x = x0)$D[1] # f'(x0)
    x1 <- x0 - (f(x0) / dx) # Calculate next value x1
    k[i] <- x1 
    
    if (abs(x1 - x0) < tol) {
      root.approx.newton <- tail(k, n=1)
      resNewton <- list('root approximation' = root.approx.newton, 'iterations' = k)
      return(resNewton)
    }
    # If Newton has not yet reached convergence set x1 as x0 and continue
    x0 <- x1
  }
  print('Too many iterations in method')
}


####### Secant Method ########
secant.method <- function(f, a, b, tol = 1e-12, n = 100) {
  k <- n # Initialize for iteration results
  
  for (i in 1:n) {
    c <- b - f(b) / ((f(b) - f(a)) / (b - a)) # Calculate the new x value
    k[i] <- c
    if (abs(c - b) < tol) { 
      root.approx.secant<- tail(k, n=1)
      resSecant <- list('root approximation' = root.approx.secant, 'iterations' = k)
      return(resSecant)
    }
    # If the root was not determined in the previous iteration, update the values and proceed to the next iteration.
    a <- b
    b <- c 
  }
}

########## False Position ##########
falseP.method <- function(f, a, b, tol = 1e-12, n = 10000) {
  k <- n
  
  # Checking starting points
  if (sign(f(a) == sign(f(b)))) {
   return("Points are of the same sign, so regula falsi will not work")
  }
    
  for (i in 1:n) {
    c <- a - (((b -a) * f(a) / (f(b) - f(a))))
    k[i] <- c
    if (f(c) == 0 || c < tol) {
      resFalseP <- list('root approximation' = c , 'iterations' = k)
      return(resFalseP)
    }
    ## If the root was not determined in the previous iteration, update the values and proceed to the next iteration.
    ifelse(sign(f(c)) == sign(f(a)), 
           a <- c,
           b <- c)
  }
  # max number of iter to avoid endless loop
  print('Too many iterations')
}
    

###### p1 #####
bisection.method(p1, 0, 1) #root 0.3720629 iterations = 40
newton.method(p1, 0) # root = 0.3720629 iterations = 5
secant.method(p1, 0, 1) # root = 0.3720629 iterations = 8
falseP.method(p1, 0, 1) # root = 0.3720629 iterations = 23
abs(p1(0.3720629)) #backwards error = 2.279011e_08
# Order of best choice from best to worst

# 1. Newton
# 2. Secant
# 3. False Position
# 4. Bisection

##### p2 #####
bisection.method(p2, 0, 1) # root = 0.5719506 iterations = 40
newton.method(p2, 0) ## root = 0.5719506 iterations = 8
secant.method(p2, 0, 1) # root = 0.5719506 iterations = 11
falseP.method(p2, 0, 1) # could not be calculated in 10,000 iterations 
abs(p2(0.5719506)) #backwards error = 1.7582e-07

# Order of best choice from best to worst
# 1. Newton
# 2. Secant
# 3. Bisection
# 4. False Position 
